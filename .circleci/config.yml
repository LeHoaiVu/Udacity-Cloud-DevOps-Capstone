# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "micro-services-<<parameters.workflow_id>>"

  install_awscli:
    description: Install awscli
    steps:
      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install ansible
    steps:
      - run:
          name: Install ansible
          command: |
            sudo apt update
            sudo apt install ansible -y

  install_eksctl:
    description: Install eksctl
    steps:
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

  install_kubectl:
    description: install kubectl command line tool
    steps:
      - run:
          name: get kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
jobs:
  lint:
    docker:
      # Use the same Docker base as the project
      - image: cimg/python:3.8.16
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 --version
            python3 -m venv venv
            pip install wheel
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            # cd python-helloworld
            make all

  build-docker:
    environment:
      IMAGE_NAME: lehoaivu52/flask_app_img
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            cd python-helloworld
            docker --version
            # Build image and add a descriptive tag
            docker build -t python-helloworld .
            # List docker images
            docker images
            ## Run a container
            docker run -d -p 5000:5000 python-helloworld
            docker tag python-helloworld lehoaivu52/python-helloworld:latest
            docker images
            echo "====> push image to docker hub"
            docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
            docker push lehoaivu52/python-helloworld:latest

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure micro services infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udakynk \
              --stack-name "micro-services-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add ip to ansible inventory
          command: |
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text --filter Name=tag:Name,Values=micro-services-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install deps
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz build
            aws s3 cp build s3://flask-app-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  create-cluster:
    docker:
      - image: cimg/python:3.10
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/create-cluster:
          cluster-name: flask-app-${CIRCLE_WORKFLOW_ID:0:7}
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: flask-app-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          command: |
            echo 'run '
            # kubectl get services
            kubectl get deploy,rs,svc,pods
          name: Create cluster
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  deployment:
    docker:
      - image: cimg/python:3.10
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: flask-app-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          command: |
            kubectl version --client
            kubectl create deploy python-helloworld --image=lehoaivu52/python-helloworld:latest
            kubectl get deploy,rs,svc,pods
          name: deployment cluster
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  delete-cluster:
    docker:
      # - image: cimg/python:3.10
      - image: amazon/aws-cli
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      # - aws-eks/delete-cluster:
      #     cluster-name: my-eks-demo
      # - install_awscli
      - run:
          command: |
            # your code here
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            echo '------------------'
            export BACKENDSTACKS=($(aws cloudformation describe-stacks --no-paginate --query 'Stacks[?StackName!=`null`]|[?contains(StackName, `flask-app-backend`) == `true`].StackName' --output text))
            echo List backend stacks: "${BACKENDSTACKS[@]}"
            echo '--------------------'
            for BACKENDSTACK in "${BACKENDSTACKS[@]}"
            do
              OldWorkflowID=${BACKENDSTACK: -7}
              echo '--------------------'
              echo handling cleanup workflowID: "${OldWorkflowID}"
              if [[ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                echo removing resources of OldWorkflowID: "${OldWorkflowID}"
                #aws s3 rm --recursive s3://flask-app-${OldWorkflowID}
                #aws s3 rb --force s3://flask-app-${OldWorkflowID}
                #aws cloudformation delete-stack --stack-name flask-app-frontend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name "flask-app-${OldWorkflowID}"
                echo done removing
              else
                echo '------------------ this is the current workflow -----------------'
              fi
              echo '--------------------'
            done
          name: Test cluster
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id and remove
          command: |
            # your code here
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            echo '------------------'
            export BACKENDSTACKS=($(aws cloudformation describe-stacks --no-paginate --query 'Stacks[?StackName!=`null`]|[?contains(StackName, `flask-app-backend`) == `true`].StackName' --output text))
            echo List backend stacks: "${BACKENDSTACKS[@]}"
            echo '--------------------'
            for BACKENDSTACK in "${BACKENDSTACKS[@]}"
            do
              OldWorkflowID=${BACKENDSTACK: -7}
              echo '--------------------'
              echo handling cleanup workflowID: "${OldWorkflowID}"
              if [[ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                echo removing resources of OldWorkflowID: "${OldWorkflowID}"
                #aws s3 rm --recursive s3://flask-app-${OldWorkflowID}
                #aws s3 rb --force s3://flask-app-${OldWorkflowID}
                #aws cloudformation delete-stack --stack-name flask-app-frontend-${OldWorkflowID}

                aws cloudformation delete-stack --stack-name "flask-app-${OldWorkflowID}"
                echo done removing
              else
                echo '------------------ this is the current workflow -----------------'
              fi
              echo '--------------------'
            done

workflows:
  default:
    jobs:
      - lint
      - build-docker:
          requires:
            - lint
      - create-cluster:
          requires:
            - build-docker
      - deployment:
          requires:
            - create-cluster
      - cleanup:
          requires:
            - deployment
